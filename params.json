{
  "name": "Information Retrieval and Extraction Major Project",
  "tagline": "Humor Detection for Yelp Reviews",
  "body": "\r\n### Problem Statement:\r\nOur problem is to predict community determined humor in Yelp reviews. Yelp reviews can be \r\nvoted as funny and, given a review, it is our task to label it as funny or not, using machine \r\nlearning techniques. \r\n\r\n### Applications  ­ \r\nYelp is a service whose utility relies on being able to provide an accurate, crowd sourced \r\nopinion of a place of business. So it’s important to determine which reviews provide valuable \r\ninsight into a business. Humor could play an important role in this determination and help \r\nconsumers to get to informative reviews and not waste time on reviews which have nothing to \r\nprovide. So, our project would help in correctly identifying humor.\r\n \r\n### Challenges ­ \r\nWe cannot have an idea whether or not our models can be extended out of ­domain. This is \r\nbecause there is no labeled corpus of funny texts – partially due to the subjectivity associated \r\nwith imposing a binary outcome on something such as humor. Some work has been done \r\napplying similar methods to Twitter, but no large, labelled datasets exist for thorough validation. \r\n\r\n### Pre­processing ­  \r\n1. Tokenize the reviews, without removing stop words or punctuations, as they are quite \r\nexpressive in the context of Yelp.  \r\n2. Build word vectors using gensim package.\r\n \r\n### SVM on Bag of Words ­  \r\nMade feature vectors using Tf-Idf Vectorization and fed this to SVM classifier with linear kernel and got 85.0% accuracy.\r\nThe SVM train function from scikit library of python was used for this.\r\n\r\n<img src=\"svm_acc.png\" />\r\n\r\n### Deep Feedforward Neural Network\r\n\r\nCreated word vectors of length 100 on the reviews using gensim Word2Vec and fed the 1D feature vector as input to the neural network with a hidden layer and 2 output units. After running for 30 epochs, with 20% test data, the accuracy was 89.87%\r\n<img src=\"fnn_acc.png\" />\r\n\r\n### Convolutional Neural Networks \r\n\r\nThe input was convoluted with filters of size 3,4,5,6 and width same as that of the input. We trained CNN for 20 epochs with a batch size of 100. Using 1-max pooling for each filter, we get a 1D vector. This vector is the input to the softmax layer which classifies the review as funny or not funny. The accuracy up till the time the code executed was 77% on the validation data.\r\n\r\n<img src=\"cnn_acc.png\" />\r\n\r\n### References ­  \r\nOliveira and Rodrigo, Humor Detection in Yelp reviews \r\nhttps://cs224d.stanford.edu/reports/OliveiraLuke.pdf  \r\n ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}